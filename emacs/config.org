#+TITLE: Yasser Gonzalez's Emacs Configuration

* About

  This is my Emacs configuration maintained in an Org-mode file.
  =~/.emacs.d/init.el= simply loads all the Elisp code in this
  document using Org-babel:

#+BEGIN_SRC emacs-lisp :tangle no
  (require 'org)
  (setq vc-follow-symlinks nil)
  (defvar yasserglez/config-file "~/.emacs.d/config.org")
  (org-babel-load-file yasserglez/config-file)
#+END_SRC

  I use the following interactive functions to edit and reload this
  file within Emacs.

#+BEGIN_SRC emacs-lisp
  (defun yasserglez/edit-config-file ()
    (interactive)
    (find-file yasserglez/config-file))

  (defun yasserglez/load-config-file ()
    (interactive)
    (org-babel-load-file yasserglez/config-file))
#+END_SRC

* Package Management

  I use Emacs' built-in =package.el= for package management with the
  GNU and MELPA Stable repos (and also other package-specific repos).
  =package-enable-at-startup= is set to =nil=, to avoid loading the
  packages again after processing the init file.

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives
        '(("gnu" . "http://elpa.gnu.org/packages/")
          ("melpa-stable" . "http://stable.melpa.org/packages/")
          ("elpy" . "http://jorgenschaefer.github.io/packages/")))
  (setq package-enable-at-startup nil)
  (package-initialize)
#+END_SRC

  I keep a list of packages that are frequently used so they can be
  easily installed with the =yasserglez/install-base-packages=
  function on a new Emacs installation.

#+BEGIN_SRC emacs-lisp
  (defvar yasserglez/base-packages
    '(auctex
      elpy
      ess
      magit
      relative-line-numbers
      solarized-theme
      yasnippet))

  (defun yasserglez/install-base-packages ()
    (interactive)
    (package-refresh-contents)
    (mapc (lambda (package)
            (unless (package-installed-p package)
              (package-install package)))
          yasserglez/base-packages))
#+END_SRC

  =yasserglez/when-package-is-installed= is used for code that should
  run only if a particular package is installed (when =package.el=
  installs a new package it creates an autoload file named as the
  package with =-autoloads= appended). It allows to keep the settings
  associated with a package in the configuration file even when the
  package is not installed.

#+BEGIN_SRC emacs-lisp
  (defmacro yasserglez/when-package-is-installed (package &rest code)
    (declare (indent defun))
    `(eval-after-load ,(concat package "-autoloads")
       '(progn ,@code)))
#+END_SRC

* Appearance

  Settings related with Emacs' appearance.

** Show the buffer name in the window title

#+BEGIN_SRC emacs-lisp
    (require 'uniquify)
    (setq frame-title-format "%b"
          uniquify-buffer-name-style 'forward)
#+END_SRC

** Hide the the toolbar and the scrollbars

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

** Solarized color theme

#+BEGIN_SRC emacs-lisp
  (yasserglez/when-package-is-installed "solarized-theme"
    ;; Don't change the size of org-mode headlines
    (setq solarized-scale-org-headlines nil)
    ;; Avoid all font-size changes
    (setq solarized-height-minus-1 1.0
          solarized-height-plus-1 1.0
          solarized-height-plus-2 1.0
          solarized-height-plus-3 1.0
          solarized-height-plus-4 1.0)
    (load-theme 'solarized-dark t))
#+END_SRC

** Display relative line numbers

#+BEGIN_SRC emacs-lisp
    (yasserglez/when-package-is-installed "relative-line-numbers"
      ;; Enable globally
      (global-relative-line-numbers-mode)
      ;; Follow visual lines
      (setq relative-line-numbers-motion-function 'vertical-motion))
#+END_SRC

** Show line and column number in the mode line

#+BEGIN_SRC emacs-lisp
  (line-number-mode)
  (column-number-mode)
#+END_SRC

* Spell Checking

Use GNU Aspell for spell checking. Enable =flyspell-mode= in all text
mode buffers and =flyspell-prog-mode= in all programming mode buffers.

#+BEGIN_SRC emacs-lisp
  (setq ispell-program-name "aspell"
        ispell-extra-args '("--sug-mode=ultra")
        ispell-dictionary "en"
        ispell-personal-dictionary "~/.emacs.d/aspell.pws")
  (add-hook 'text-mode-hook 'flyspell-mode)
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)
  ;; Unset the C-M-i key binding, used for completion in Elpy
  (eval-after-load "flyspell"
    '(define-key flyspell-mode-map (kbd "C-M-i") nil))
#+END_SRC

* YASnippet

Enable the YASnippet minor mode in all buffers.

#+BEGIN_SRC emacs-lisp
  (yasserglez/when-package-is-installed "yasnippet"
    (yas-global-mode 1))
#+END_SRC

* Python

  I use Elpy for Python programming. Jedi (=pip install --user jedi=)
  is required for code completion, and flake8 (=pip install --user flake8=)
  for code checking.

#+BEGIN_SRC emacs-lisp
  (yasserglez/when-package-is-installed "elpy"
    (elpy-enable)
    ;; Use Jedi for introspection and completion
    (setq elpy-rpc-backend "jedi")
    ;; Use IPython as the interactive interpreter
    (elpy-use-ipython)
    ;; Run tests using pytest
    (elpy-set-test-runner 'elpy-test-pytest-runner)
    ;; Disable highlight-indentation
    (setq elpy-modules (delq 'elpy-module-highlight-indentation elpy-modules))
    ;; Alias for pyvenv-workon
    (defalias 'workon 'pyvenv-workon))
#+END_SRC

* R

  I use Emacs Speaks Statistics (ESS) for R programming.

#+BEGIN_SRC emacs-lisp
  (yasserglez/when-package-is-installed "ess"
    ;; Don't prompt for a starting directory when starting a new process
    (setq ess-ask-for-ess-directory nil)
    ;; An underscore is just an underscore
    (setq ess-toggle-underscore nil)
    ;; Autoload ESS for .R files
    (autoload 'R-mode "ess-site.el" "ESS" t)
    (add-to-list 'auto-mode-alist '("\\.R$" . R-mode))
    ;; Code formatting
    (setq ess-default-style 'OWN
          ess-indent-level 4
          ess-first-continued-statement-offset 0
          ess-continued-statement-offset 4
          ess-brace-offset -4
          ess-arg-function-offset nil
          ess-arg-function-offset-new-line nil
          ess-expression-offset nil
          ess-else-offset 0
          ess-close-brace-offset 0))
#+END_SRC

* LaTeX

  I use AUCTeX to write LaTeX documents.

#+BEGIN_SRC emacs-lisp
  (yasserglez/when-package-is-installed "auctex"
    ;; Enable the PDF mode
    (setq TeX-PDF-mode t)
    ;; Enable document parsing
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    ;; Define a default name for the top-level document
    (setq-default TeX-master "master")
    ;; Don't ask before saving each file
    (setq TeX-save-query nil)
    ;; Enable LaTeX Math mode by default
    (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
    ;; Enable RefTeX
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
    (setq reftex-plug-into-AUCTeX t))
#+END_SRC

* Git

  Git integration using Magit.

#+BEGIN_SRC emacs-lisp
  (yasserglez/when-package-is-installed "magit"
    ;; vc-git no longer needed.
    (delete 'Git vc-handled-backends)
    ;; Don't show " MRev" in modeline.
    (setq magit-auto-revert-mode-lighter "")
    ;; Bind a global key to magit-status.
    (global-set-key (kbd "C-c g") 'magit-status))
#+END_SRC

* Miscellaneous

  Settings that don't belong to any previous category.

** Disable prompts and startup messages

   Based on http://www.masteringemacs.org/article/disabling-prompts-emacs.

#+BEGIN_SRC emacs-lisp
  ;; Ask "yes or no" questions with "y or n"
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; Disable confirmations for non-existing files or buffers
  (setq confirm-nonexistent-file-or-buffer nil)

  ;; Disable the splash screen and the echo area message
  (setq inhibit-startup-message t
        inhibit-startup-echo-area-message "yasserglez")

  ;; Kill a buffer even if it has a process attached to it
  (setq kill-buffer-query-functions
    (remq 'process-kill-buffer-query-function
           kill-buffer-query-functions))
#+END_SRC

** Disable auto-save and backups

#+BEGIN_SRC emacs-lisp
  (setq auto-save-default nil)
  (setq make-backup-files nil)
#+END_SRC

** End sentences with one space

#+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)
#+END_SRC

** Remove trailing whitespace on save

#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** RET auto-indents by default

#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "RET") 'newline-and-indent)
#+END_SRC
