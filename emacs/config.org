#+TITLE: Yasser Gonzalez's Emacs Configuration

* About

Emacs configuration file in Org-mode format. =~/.emacs.d/init.el=
simply loads the Emacs Lisp code in this file using Org-babel:

#+BEGIN_SRC emacs-lisp :tangle no
  (require 'package)
  (setq package-enable-at-startup nil)
  (package-initialize)

  (require 'org)
  (setq vc-follow-symlinks nil)
  (defvar my-config-file "~/.emacs.d/config.org")
  (org-babel-load-file my-config-file)
#+END_SRC

=package.el= is loaded first to support using Org-mode installed from
an ELPA archive. =package-enable-at-startup= is set to =nil= to avoid
loading the packages again after processing the init file.

* Package management

Emacs' built-in =package.el= is used for package management with the
GNU and MELPA repositories (and also other package-specific repositories).

#+BEGIN_SRC emacs-lisp
  (setq package-archives
        '(("gnu" . "http://elpa.gnu.org/packages/")
          ("melpa" . "http://melpa.org/packages/")
          ("org" . "http://orgmode.org/elpa/")))
#+END_SRC

Keep a list of packages that are frequently used so they can be easily
installed with =my-install-base-packages=.

#+BEGIN_SRC emacs-lisp
  (defvar my-base-packages
    '(alert
      bind-key
      exec-path-from-shell
      org-plus-contrib
      org-pomodoro
      solarized-theme))

  (defun my-install-base-packages ()
    (interactive)
    (package-refresh-contents)
    (dolist (package my-base-packages)
      (unless (package-installed-p package)
        (package-install package))))
#+END_SRC

* Set =exec-path= from =$PATH=

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'exec-path-from-shell)
    (setq exec-path-from-shell-variables '("PATH"))
    (exec-path-from-shell-initialize))
#+END_SRC

* Appearance

Settings related with Emacs' appearance.

** Show the buffer name in the window title

#+BEGIN_SRC emacs-lisp
  (require 'uniquify)
  (setq frame-title-format "%b"
        uniquify-buffer-name-style 'forward)
#+END_SRC

** Hide the the toolbar and the scrollbars

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

** Solarized color theme

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'solarized-theme)
    ;; Don't change the size of org-mode headlines
    (setq solarized-scale-org-headlines nil)
    ;; Avoid all font-size changes
    (setq solarized-height-minus-1 1.0
          solarized-height-plus-1 1.0
          solarized-height-plus-2 1.0
          solarized-height-plus-3 1.0
          solarized-height-plus-4 1.0)
    (load-theme 'solarized-dark t))
#+END_SRC

** Show line and column number in the mode line

#+BEGIN_SRC emacs-lisp
  (line-number-mode)
  (column-number-mode)
#+END_SRC

* Alerts

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'alert)
    (require 'alert)
    ;; Configure the default style in OS X and Ubuntu
    (when (eq system-type 'darwin)
      (setq alert-default-style 'notifier))
    (when (eq system-type 'gnu/linux)
      (setq alert-default-style 'libnotify)))
#+END_SRC

* Key bindings

Key bindings are managed using the =bind-key= package. =bind-key*= is
used to define new key bindings anywhere in the configuration file,
and =my-key-bindings= can be used to obtain a summary of all the
defined key bindings.

#+BEGIN_SRC emacs-lisp
  (require 'bind-key)

  (defun my-key-bindings ()
    (interactive)
    (describe-personal-keybindings))
#+END_SRC

* Spell checking

GNU Aspell is used for spell checking. =flyspell-mode= is enabled in all
text-mode buffers and =flyspell-prog-mode= in all programming-mode buffers.

#+BEGIN_SRC emacs-lisp
  (setq ispell-program-name "aspell"
        ispell-extra-args '("--sug-mode=ultra")
        ispell-dictionary "en"
        ispell-personal-dictionary "~/.emacs.d/aspell.pws")
  (add-hook 'text-mode-hook 'flyspell-mode)
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)
  ;; Unset the C-M-i key binding, used for completion in Elpy
  (eval-after-load "flyspell"
    '(define-key flyspell-mode-map (kbd "C-M-i") nil))
#+END_SRC

* Org-mode

I use a task management system based on David Allen's [[http://gettingthingsdone.com/][GTD methodology]].
Configuration ideas were borrowed from [[http://doc.norang.ca/org-mode.html][Bernt Hansen]] and [[http://www.newartisans.com/2007/08/using-org-mode-as-a-day-planner/][John Wiegley]].

** Task states

#+BEGIN_SRC emacs-lisp
  (setq org-use-fast-todo-selection t)
  (setq org-todo-keywords
        '((sequence "TODO(t!)" "MAYBE(m!)" "|" "DONE(d!)" "REF(r!)")))
#+END_SRC

Tasks marked as =TODO= are things I've committed to work on -- i.e.
next actions in GTD. =TODO= tasks may have an associated date or time
(for appointments, etc), or sometimes I schedule them to be done on a
particular day during the weekly review. Tasks marked as =MAYBE= are
things I might want to do in the future -- i.e. someday/maybes in GTD.
=MAYBE= tasks generally turn into =TODO= tasks when I decide to work on
them. =TODO= tasks can be resolved by marking them as =DONE= or =REF=.
Tasks marked as =DONE= can be archived, while =REF= tasks may be
relevant for future reference (e.g., notes about articles I've read).

Task state changes are logged into a drawer. A timestamp is added
every time a task transitions form one state to another (hence the
=!= markers after the keywords above).

#+BEGIN_SRC emacs-lisp
  (setq org-log-into-drawer "LOGBOOK")
  (setq org-clock-into-drawer "LOGBOOK")
  (setq org-log-redeadline 'time)
  (setq org-log-reschedule 'time)
  (setq org-log-repeat 'time)
#+END_SRC

** Agenda

=inbox.org= is used for capturing tasks (with capture templates and a
few [[https://ifttt.com][IFTTT]] recipes that append content to the file). I keep separate
files for the different projects I'm working on (basically containing
headers for tasks and reference materials). Each file has a =#+FILETAGS=
header so it is easier to filter tasks for a particular project using
tags in the agenda.

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files '("~/Dropbox/org/"))
#+END_SRC

Configure a group of agenda views and key bindings for quick access.

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-repeating-timestamp-show-all t
        org-agenda-remove-tags t
        org-agenda-show-all-dates t
        org-agenda-skip-deadline-if-done t
        org-agenda-skip-deadline-prewarning-if-scheduled t
        org-agenda-skip-scheduled-if-done t
        org-agenda-start-on-weekday nil)

  (setq org-agenda-custom-commands
        '(("c" . "Custom agenda commands")
          ("cd" "Agenda for today" agenda ""
           ((org-agenda-compact-blocks t)
            (org-agenda-span 1)
            (org-deadline-warning-days 0)))
          ("cw" "Agenda for next week" agenda ""
           ((org-agenda-compact-blocks t)
            (org-agenda-span 7)
            (org-deadline-warning-days 14)))
          ("ct" "Unscheduled tasks" todo "TODO"
           ((org-agenda-overriding-header "Unscheduled tasks: ")
            (org-agenda-skip-function '(org-agenda-skip-subtree-if 'timestamp))))))

  (bind-key* "C-c a" 'org-agenda)
  (defun my-org-agenda-next-week (&optional arg)
    (interactive "P")
    (org-agenda arg "cw"))
  (bind-key* "<f12>" 'my-org-agenda-next-week)
  (defun my-org-agenda-today (&optional arg)
    (interactive "P")
    (org-agenda arg "cd"))
  (bind-key* "<f11>" 'my-org-agenda-today)
  (defun my-org-agenda-tasks (&optional arg)
    (interactive "P")
    (org-agenda arg "ct"))
  (bind-key* "<f10>" 'my-org-agenda-tasks)
#+END_SRC

** Capturing and refiling

Everything goes into =inbox.org= and it's later refiled to the correct file.

#+BEGIN_SRC emacs-lisp
  (setq org-directory "~/Dropbox/org/")
  (setq org-default-notes-file "~/Dropbox/org/inbox.org")

  (setq org-capture-templates
        '(("t" "Task" entry (file "")
           "* TODO %?\n  :LOGBOOK:\n  - State \"TODO\"                         %U\n  :END:")
          ("r" "Reference" entry (file "")
           "* REF %?\n  :LOGBOOK:\n  - State \"REF\"                    %U\n  :END:")))

  (bind-key* "<f9>" 'org-capture)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq org-refile-targets '((org-agenda-files :level . 1)))
#+END_SRC

** Habits

The states used in the consistency graphs are simplified by
representing the yellow (if the task was going to be overdue the next
day) and red (if the task was overdue on that day) states with a
single red color. The colors also have been modified to match the ones
used in the agenda views (which come from the solarized color palette).

#+BEGIN_SRC emacs-lisp
  (require 'org-habit)

  (setq org-habit-preceding-days 14)
  (setq org-habit-following-days 1)
  (setq org-habit-show-habits-only-for-today t)
  (setq org-habit-show-done-always-green t)

  ;; Blue :: If the task wasn't to be done yet on that day.
  (set-face-attribute 'org-habit-clear-face nil
                      :foreground "#002b36"
                      :background "#268bd2")
  (set-face-attribute 'org-habit-clear-future-face nil
                      :foreground "#002b36"
                      :background "#268bd2")

  ;; Green :: If the task could have been done on that day.
  (set-face-attribute 'org-habit-ready-face nil
                      :foreground "#002b36"
                      :background "#859900")
  (set-face-attribute 'org-habit-ready-future-face nil
                      :foreground "#002b36"
                      :background "#859900")

  ;; Red :: If the task was overdue on that day, or if the task was
  ;; going to be overdue the next day.
  (set-face-attribute 'org-habit-overdue-face nil
                      :foreground "#002b36"
                      :background "#cb4b16")
  (set-face-attribute 'org-habit-overdue-future-face nil
                      :foreground "#002b36"
                      :background "#cb4b16")
  (set-face-attribute 'org-habit-alert-face nil
                      :foreground "#002b36"
                      :background "#cb4b16")
  (set-face-attribute 'org-habit-alert-future-face nil
                      :foreground "#002b36"
                      :background "#cb4b16")
#+END_SRC

** Pomodoro technique

#+BEGIN_SRC emacs-lisp
  (require 'org-pomodoro)
#+END_SRC

Set the duration of the pomodoro.

#+BEGIN_SRC emacs-lisp
  (setq org-pomodoro-length 25
        org-pomodoro-long-break-frequency 4
        org-pomodoro-short-break-length 3
        org-pomodoro-long-break-length 15)
#+END_SRC

Configure the notifications: disable sounds, configure the modeline,
show only the minutes remaining on the timer (I find the ticking
seconds to be quite distracting), and use desktop notifications.

#+BEGIN_SRC emacs-lisp
  (setq org-pomodoro-play-sounds nil
        org-pomodoro-format "Pomodoro %s"
        org-pomodoro-short-break-format "Short Break %s"
        org-pomodoro-long-break-format "Long Break %s")

  (set-face-foreground 'org-pomodoro-mode-line
                       (face-attribute 'mode-line :foreground))
  (set-face-foreground 'org-pomodoro-mode-line-break
                       (face-attribute 'mode-line :foreground))

  (defun org-pomodoro-format-seconds ()
    (format-seconds org-pomodoro-time-format
                    (* 60 (ceiling org-pomodoro-countdown 60))))

  (defun org-pomodoro-notify (title message)
    (alert message :title title))
#+END_SRC

=F5= can be used to start/stop a pomodoro.

#+BEGIN_SRC emacs-lisp
  (bind-key* "<f5>" 'org-pomodoro)
#+END_SRC

** Holidays

Configure a list of relevant holidays.

#+BEGIN_SRC emacs-lisp
  (setq holiday-local-holidays
        '((holiday-fixed 2 14 "Valentine's Day")
          (holiday-fixed 4 1 "April Fools' Day")
          (holiday-float 5 0 2 "Mother's Day")
          (holiday-float 6 0 3 "Father's Day")
          (holiday-fixed 10 31 "Halloween")
          (holiday-fixed 12 31 "New Year's Eve")
          ;; Ontario Public Holidays
          ;; http://www.labour.gov.on.ca/english/es/pubs/guide/publicholidays.php
          (holiday-fixed 1 1 "New Year's Day")      ; January 1
          (holiday-float 2 1 3 "Family Day")        ; Third Monday in February
          (holiday-easter-etc -2 "Good Friday")     ; Friday before Easter Sunday
          (holiday-float 5 1 -1 "Victoria Day" 24)  ; Monday before May 25
          (holiday-fixed 7 1 "Canada Day")          ; July 1
          (holiday-float 8 1 1 "Civic Holiday")     ; First Monday in August
          (holiday-float 9 1 1 "Labour Day")        ; First Monday in September
          (holiday-float 10 1 2 "Thanksgiving Day") ; Second Monday in October
          (holiday-fixed 12 25 "Christmas Day")     ; Christmas Day
          (holiday-fixed 12 26 "Boxing Day")))      ; Boxing Day

  (setq holiday-other-holidays '())
#+END_SRC

Regenerate =calendar-holidays=.

#+BEGIN_SRC emacs-lisp
  (setq calendar-holidays
        (append holiday-local-holidays
                holiday-other-holidays))
#+END_SRC

** Encryption

Support encrypting individual entries using Org-crypt.

#+BEGIN_SRC emacs-lisp
  (require 'org-crypt)

  ;; Use a hook to automatically encrypt entries before a file is saved
  (org-crypt-use-before-save-magic)

  ;; GPG key used for encryption
  (setq org-crypt-key "97DF6096")

  ;; Encrypted entries are marked with the private tag. Excluding the
  ;; private tag from inheritance prevents already encrypted text being
  ;; encrypted again.
  (setq org-crypt-tag-matcher "private")
  (setq org-tags-exclude-from-inheritance '("private"))
#+END_SRC

** Miscellaneous

*** Associate Org-mode with .org and.org_archive files

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
  (add-to-list 'auto-mode-alist '("\\.org_archive\\'" . org-mode))
#+END_SRC

*** Save all Org-mode buffers at one minute before the hour

This is used in combination with the =bin/org-sync= shell script.

#+BEGIN_SRC emacs-lisp
  (run-at-time "00:59" (* 60 60) 'org-save-all-org-buffers)
#+END_SRC

*** Don't split lines with M-RET

#+BEGIN_SRC emacs-lisp
  (setq org-M-RET-may-split-line nil)
#+END_SRC

*** Show hours and minutes in clock tables

#+BEGIN_SRC emacs-lisp
  (setq org-time-clocksum-format
        '(:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t))
#+END_SRC

*** Only record the time when a task is archived

#+BEGIN_SRC emacs-lisp
  (setq org-archive-save-context-info '(time))
#+END_SRC

*** Key bindings

#+BEGIN_SRC emacs-lisp
  (bind-key* "C-c b" 'org-iswitchb)
  (bind-key* "C-c l" 'org-store-link)
#+END_SRC

* Git

Git integration using Magit.

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'magit)
    ;; vc-git no longer needed.
    (delete 'Git vc-handled-backends)
    ;; Don't show " MRev" in modeline.
    (setq magit-auto-revert-mode-lighter "")
    ;; Bind a global key to magit-status.
    (bind-key* "C-c g" 'magit-status))
#+END_SRC

* Miscellaneous

Settings that don't fit in any previous category.

** Disable prompts and startup messages

Based on [[http://www.masteringemacs.org/article/disabling-prompts-emacs][Disabling Prompts in Emacs]].

#+BEGIN_SRC emacs-lisp
  ;; Ask "yes or no" questions with "y or n"
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; Disable confirmations for non-existing files or buffers
  (setq confirm-nonexistent-file-or-buffer nil)

  ;; Disable the splash screen and the echo area message
  (setq inhibit-startup-message t
        inhibit-startup-echo-area-message "yasserglez")

  ;; Kill a buffer even if it has a process attached to it
  (setq kill-buffer-query-functions
    (remq 'process-kill-buffer-query-function
           kill-buffer-query-functions))
#+END_SRC

** Disable auto-save and backups

#+BEGIN_SRC emacs-lisp
  (setq auto-save-default nil)
  (setq make-backup-files nil)
#+END_SRC

** End sentences with one space

#+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)
#+END_SRC

** Remove trailing whitespace on save

#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** Require a final newline when saving files

#+BEGIN_SRC emacs-lisp
  (setq require-final-newline t)
#+END_SRC

** RET auto-indents by default

#+BEGIN_SRC emacs-lisp
  (bind-key "RET" 'newline-and-indent)
#+END_SRC

** Don't use tabs for indentation

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC
