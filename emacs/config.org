#+TITLE: Yasser Gonzalez's Emacs Configuration

* About

This is my Emacs configuration maintained in an Org-mode file.
It is a work-in-progress inspired by similar configurations by
[[http://sachac.github.io/.emacs.d/Sacha.html][Sacha Chua]], [[http://mescal.imag.fr/membres/arnaud.legrand/misc/init.php][Arnaud Legrand]], and [[http://milkbox.net/note/single-file-master-emacs-configuration][Donald Curtis]].

The =~/.emacs.d/init.el= file simply loads all the elisp code in this
document using Org-babel:

#+begin_src emacs-lisp  :tangle no
  (require 'org)
  (defvar ygf/config-file "~/.emacs.d/config.org")
  (org-babel-load-file ygf/config-file)
#+end_src

The following key bindings are set to easily edit and reload this file
within Emacs.

#+begin_src emacs-lisp
  (defun yglez/edit-config-file ()
    (interactive)
    (find-file ygf/config-file))
  
  (global-set-key (kbd "C-c e") 'yglez/edit-config-file)
  
  (defun yglez/reload-config-file ()
    (interactive)
    (org-babel-load-file ygf/config-file))
    
  (global-set-key (kbd "C-c r") 'yglez/reload-config-file)
#+end_src

* Package Management

I use Emacs' built-in =~package.el= for package management with the
GNU and MELPA repositories. =~package-enable-at-startup= is set to nil,
to avoid loading the packages again after processing the init file.

#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives
        '(("gnu" . "http://elpa.gnu.org/packages/")
          ("melpa" . "http://melpa.org/packages/")))
  (setq package-enable-at-startup nil)
  (package-initialize)
#+end_src

I keep a list of packages that I use very often so they can be
easily installed using the =~ygf/install-basic-packages= function
on a new Emacs installation.

#+begin_src emacs-lisp
  (defvar yglez/basic-packages
    '(solarized-theme))
  
  (defun yglez/install-basic-packages ()
    (interactive)
    (package-refresh-contents)
    (mapc (lambda (package)
            (unless (package-installed-p package)
              (package-install package)))
          yglez/basic-packages))
#+end_src

The following two functions are based on Donald Curtis' =~after= macro.
=~yglez/when-package-is-available= is used for code that should run
if the package is available (when =~package.el= installs a new package
it creates an autoload file named as the package with =~-autoloads=
appended). =~yglez/after-package-loaded= is used for code that
should run after a package is loaded by checking for a feature
name provided by the package.

#+begin_src emacs-lisp
  (defmacro yglez/when-package-is-available (package &rest code)
    (declare (indent defun))
    `(eval-after-load ,(concat package "-autoloads")
       '(progn ,@code)))
  
  (defmacro yglez/after-package-is-loaded (package &rest code)
    (declare (indent defun))
    `(eval-after-load ,package
       '(progn ,@code)))
#+end_src
  
* Aesthetics

** Disable the splash screen

#+begin_src emacs-lisp
  (setq inhibit-splash-screen t)
#+end_src

** Solarized color theme

#+begin_src emacs-lisp
  (yglez/when-package-is-available "solarized-theme"
    ;; Avoid all font-size changes
    (setq solarized-height-minus-1 1)
    (setq solarized-height-plus-1 1)
    (setq solarized-height-plus-2 1)
    (setq solarized-height-plus-3 1)
    (setq solarized-height-plus-4 1)
    (load-theme 'solarized-dark t))
#+end_src
