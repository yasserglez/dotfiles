#+title: Yasser Gonzalez's Emacs Configuration

* About

  This is my Emacs configuration maintained in an Org-mode file.
  The =~/.emacs.d/init.el= file simply loads all the Elisp code in
  this document using Org-babel:

#+begin_src emacs-lisp  :tangle no
  (require 'org)
  (setq vc-follow-symlinks nil)
  (defvar yasserglez/config-file "~/.emacs.d/config.org")
  (org-babel-load-file yasserglez/config-file)
#+end_src

  I use the following interactive functions to edit and reload this
  file within Emacs.

#+begin_src emacs-lisp
  (defun yasserglez/edit-config-file ()
    (interactive)
    (find-file yasserglez/config-file))

  (defun yasserglez/reload-config-file ()
    (interactive)
    (org-babel-load-file yasserglez/config-file))
#+end_src

* Package Management

  I use Emacs' built-in =~package.el= for package management with the
  GNU and MELPA Stable repos (and also other package-specific repos).
  =~package-enable-at-startup= is set to nil, to avoid loading the
  packages again after processing the init file.

#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives
        '(("gnu" . "http://elpa.gnu.org/packages/")
          ("melpa-stable" . "http://stable.melpa.org/packages/")
          ("elpy" . "http://jorgenschaefer.github.io/packages/")))
  (setq package-enable-at-startup nil)
  (package-initialize)
#+end_src

  I keep a list of packages that I use very often so they can be
  easily installed using the =~yasserglez/install-base-packages=
  function on a new Emacs installation.

#+begin_src emacs-lisp
  (defvar yasserglez/base-packages
    '(auctex elpy magit relative-line-numbers solarized-theme))

  (defun yasserglez/install-base-packages ()
    (interactive)
    (package-refresh-contents)
    (mapc (lambda (package)
            (unless (package-installed-p package)
              (package-install package)))
          yasserglez/base-packages))
#+end_src

  The following two functions are based on the configuration described
  in http://milkbox.net/note/single-file-master-emacs-configuration.
  =~yasserglez/when-package-is-available= is used for code that should
  run if the package is available (when =~package.el= installs a new
  package it creates an autoload file named as the package with
  =~-autoloads= appended). =~yasserglez/after-package-loaded= is used
  for code that should run after a package is loaded by checking for a
  feature name provided by the package.

#+begin_src emacs-lisp
  (defmacro yasserglez/when-package-is-available (package &rest code)
    (declare (indent defun))
    `(eval-after-load ,(concat package "-autoloads")
       '(progn ,@code)))

  (defmacro yasserglez/after-package-is-loaded (package &rest code)
    (declare (indent defun))
    `(eval-after-load ,package
       '(progn ,@code)))
#+end_src

* Appearance

  Settings related with Emacs' appearance.

** Disable the menu, tool and scroll bars

#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

** Solarized color theme

#+begin_src emacs-lisp
  (yasserglez/when-package-is-available "solarized-theme"
    ;; Don't change the size of org-mode headlines
    (setq solarized-scale-org-headlines nil)
    ;; Avoid all font-size changes
    (setq solarized-height-minus-1 1.0)
    (setq solarized-height-plus-1 1.0)
    (setq solarized-height-plus-2 1.0)
    (setq solarized-height-plus-3 1.0)
    (setq solarized-height-plus-4 1.0)
    (load-theme 'solarized-dark t))
#+end_src

** Show the buffer in the frame title

#+begin_src emacs-lisp
  (setq frame-title-format "%b")
#+end_src

** Show line and column number in the mode line

#+begin_src emacs-lisp
  (line-number-mode)
  (column-number-mode)
#+end_src

** Display relative line numbers

#+begin_src emacs-lisp
  (yasserglez/when-package-is-available "relative-line-numbers"
    (global-relative-line-numbers-mode))
#+end_src

* Python

  I use Elpy for Python development. Jedi (=~pip install --user jedi=)
  is required for code completion, and flake8
  (=~pip install --user flake8=) for code checking.

#+begin_src emacs-lisp
  (yasserglez/when-package-is-available "elpy"
    (elpy-enable)
    ;; Use Jedi for introspection and completion
    (setq elpy-rpc-backend "jedi")
    ;; Use IPython as the interactive intepreter
    (elpy-use-ipython)
    ;; Run tests using pytest
    (elpy-set-test-runner 'elpy-test-pytest-runner)
    ;; Disable highlight-indentation
    (setq elpy-modules (delq 'elpy-module-highlight-indentation elpy-modules)))
#+end_src

* LaTeX

  I use AUCTeX to write LaTeX documents.

#+begin_src emacs-lisp
  (yasserglez/when-package-is-available "auctex"
    ;; Enable the PDF mode
    (setq TeX-PDF-mode t)
    ;; Enable document parsing
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    ;; Make AUCTeX aware of multi-file documents
    (setq-default TeX-master nil))
#+end_src

* Git
  Git integration using Magit.

#+begin_src emacs-lisp
  (yasserglez/when-package-is-available "magit"
    ;; vc-git no longer needed.
    (delete 'Git vc-handled-backends)
    ;; Don't show " MRev" in modeline.
    (setq magit-auto-revert-mode-lighter "")
    ;; Bind a global key to magit-status.
    (global-set-key (kbd "C-c g") 'magit-status))
#+end_src

* Miscellaneous

  Settings that don't fit in any previous category.

** Disable prompts and startup messages

   Based on http://www.masteringemacs.org/article/disabling-prompts-emacs.

#+begin_src emacs-lisp
  ;; Ask "yes or no" questions with "y or n"
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; Disable confirmations for non-existing files or buffers
  (setq confirm-nonexistent-file-or-buffer nil)

  ;; Disable the splash screen and the echo area message
  (setq inhibit-startup-message t
        inhibit-startup-echo-area-message "yasserglez")

  ;; Kill a buffer even if it has a process attached to it
  (setq kill-buffer-query-functions
    (remq 'process-kill-buffer-query-function
           kill-buffer-query-functions))
#+end_src

** Disable auto-save and backups

#+begin_src emacs-lisp
  (setq auto-save-default nil)
  (setq make-backup-files nil)
#+end_src

** End sentences with one space

#+begin_src emacs-lisp
  (setq sentence-end-double-space nil)
#+end_src

** Remove trailing whitespace on save

#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

** RET auto-indents by default

#+begin_src emacs-lisp
  (define-key global-map (kbd "RET") 'newline-and-indent)
#+end_src
