#+TITLE: Yasser Gonzalez's Emacs Configuration

* About

This is my Emacs configuration maintained in an Org-mode file.
=~/.emacs.d/init.el= simply loads all the Elisp code in this document
using Org-babel:

#+BEGIN_SRC emacs-lisp :tangle no
  (require 'package)
  (setq package-enable-at-startup nil)
  (package-initialize)

  (require 'org)
  (setq vc-follow-symlinks nil)
  (defvar my-config-file "~/.emacs.d/config.org")
  (org-babel-load-file my-config-file)
#+END_SRC

=package.el= is loaded first to support using Org-mode installed from
an ELPA archive. =package-enable-at-startup= is set to =nil=, to avoid
loading the packages again after processing the init file.

I use the following interactive functions to edit and reload this file
within Emacs.

#+BEGIN_SRC emacs-lisp
  (defun my-edit-config-file ()
    (interactive)
    (find-file my-config-file))

  (defun my-reload-config-file ()
    (interactive)
    (org-babel-load-file my-config-file))
#+END_SRC

* Package Management

I use Emacs' built-in =package.el= for package management with the GNU
and MELPA Stable repos (and also other package-specific repos).

#+BEGIN_SRC emacs-lisp
  (setq package-archives
        '(("gnu" . "http://elpa.gnu.org/packages/")
          ("melpa-stable" . "http://stable.melpa.org/packages/")
          ("elpy" . "http://jorgenschaefer.github.io/packages/")
          ("org" . "http://orgmode.org/elpa/")))
#+END_SRC

I keep a list of packages that are frequently used so they can be
easily installed with the =my-install-base-packages= function on a new
Emacs installation.

#+BEGIN_SRC emacs-lisp
  (defvar my-base-packages
    '(auctex
      elpy
      ess
      magit
      markdown-mode
      org-plus-contrib
      org-pomodoro
      relative-line-numbers
      scss-mode
      solarized-theme
      web-mode
      yasnippet))

  (defun my-install-base-packages ()
    (interactive)
    (package-refresh-contents)
    (dolist (package my-base-packages)
      (unless (package-installed-p package)
        (package-install package))))
#+END_SRC

* Appearance

Settings related with Emacs' appearance.

** Show the buffer name in the window title

#+BEGIN_SRC emacs-lisp
    (require 'uniquify)
    (setq frame-title-format "%b"
          uniquify-buffer-name-style 'forward)
#+END_SRC

** Hide the the toolbar and the scrollbars

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

** Solarized color theme

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'solarized-theme)
    ;; Don't change the size of org-mode headlines
    (setq solarized-scale-org-headlines nil)
    ;; Avoid all font-size changes
    (setq solarized-height-minus-1 1.0
          solarized-height-plus-1 1.0
          solarized-height-plus-2 1.0
          solarized-height-plus-3 1.0
          solarized-height-plus-4 1.0)
    (load-theme 'solarized-dark t))
#+END_SRC

** Display relative line numbers

#+BEGIN_SRC emacs-lisp
    (when (package-installed-p 'relative-line-numbers)
      ;; Enable globally
      (global-relative-line-numbers-mode)
      ;; Follow visual lines
      (setq relative-line-numbers-motion-function 'vertical-motion))
#+END_SRC

** Show line and column number in the mode line

#+BEGIN_SRC emacs-lisp
  (line-number-mode)
  (column-number-mode)
#+END_SRC

* Spell Checking

Use GNU Aspell for spell checking. Enable =flyspell-mode= in all text
mode buffers and =flyspell-prog-mode= in all programming mode buffers.

#+BEGIN_SRC emacs-lisp
  (setq ispell-program-name "aspell"
        ispell-extra-args '("--sug-mode=ultra")
        ispell-dictionary "en"
        ispell-personal-dictionary "~/.emacs.d/aspell.pws")
  (add-hook 'text-mode-hook 'flyspell-mode)
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)
  ;; Unset the C-M-i key binding, used for completion in Elpy
  (eval-after-load "flyspell"
    '(define-key flyspell-mode-map (kbd "C-M-i") nil))
#+END_SRC

* Python

I use Elpy for Python programming. Jedi (=pip install --user jedi=) is
required for code completion, and flake8 (=pip install --user flake8=)
for code checking.

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'elpy)
    (elpy-enable)
    ;; Use Jedi for introspection and completion
    (setq elpy-rpc-backend "jedi")
    ;; Use IPython as the interactive interpreter
    (elpy-use-ipython)
    ;; Run tests using pytest
    (elpy-set-test-runner 'elpy-test-pytest-runner)
    ;; Disable highlight-indentation
    (setq elpy-modules (delq 'elpy-module-highlight-indentation elpy-modules))
    ;; Load and configure YASnippet separately
    (setq elpy-modules (delq 'elpy-module-yasnippet elpy-modules))
    ;; Alias for pyvenv-workon
    (defalias 'workon 'pyvenv-workon))
#+END_SRC

* R

I use Emacs Speaks Statistics (ESS) for R programming.

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'ess)
    ;; Don't prompt for a starting directory when starting a new process
    (setq ess-ask-for-ess-directory nil)
    ;; An underscore is just an underscore
    (setq ess-toggle-underscore nil)
    ;; Autoload ESS for .R files
    (autoload 'R-mode "ess-site.el" "ESS" t)
    (add-to-list 'auto-mode-alist '("\\.R\\'" . R-mode))
    ;; Code formatting
    (setq ess-default-style 'OWN
          ess-indent-level 4
          ess-first-continued-statement-offset 0
          ess-continued-statement-offset 4
          ess-brace-offset -4
          ess-arg-function-offset nil
          ess-arg-function-offset-new-line nil
          ess-expression-offset nil
          ess-else-offset 0
          ess-close-brace-offset 0))
#+END_SRC

* Web Development

Edit HTML and JavaScript files using =web-mode.el=.

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'web-mode)
    (require 'web-mode)
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.js\\'" . web-mode))
    ;; HTML indentation
    (setq web-mode-markup-indent-offset 2)
    ;; CSS indentation
    (setq web-mode-css-indent-offset 2)
    ;; JavaScript indentation
    (setq web-mode-code-indent-offset 4)
    ;; Highlight current HTML element
    (setq web-mode-enable-current-element-highlight t))
#+END_SRC

Edit CSS files using Emacs' built-in =css-mode= and SASS files using
=scss-mode=.

#+BEGIN_SRC emacs-lisp
  ;; CSS indentation
  (setq css-indent-offset 2)

  (when (package-installed-p 'scss-mode)
    (require 'scss-mode)
    (add-to-list 'auto-mode-alist '("\\.scss\\'" . scss-mode))
    ;; Disable compilation on save
    (setq scss-compile-at-save nil))
#+END_SRC

* LaTeX

I use AUCTeX to write LaTeX documents.

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'auctex)
    ;; Enable the PDF mode
    (setq TeX-PDF-mode t)
    ;; Enable document parsing
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    ;; Define a default name for the top-level document
    (setq-default TeX-master nil)
    ;; Don't ask before saving each file
    (setq TeX-save-query nil)
    ;; Enable LaTeX Math mode by default
    (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
    ;; Enable RefTeX
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
    (setq reftex-plug-into-AUCTeX t))
#+END_SRC

* Markdown

Editing Markdown-formatted text files.

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'markdown-mode)
    (autoload 'markdown-mode "markdown-mode"
      "Major mode for editing Markdown files" t)
    ;; Associate markdown-mode with .md and .markdown files
    (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
    (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode)))
#+END_SRC

* Org-mode

I use a task management system based mostly on David Allen's
[[http://gettingthingsdone.com/][Getting Things Done]] methodology. Many configuration ideas are borrowed
from [[http://doc.norang.ca/org-mode.html][Bernt Hansen]] and [[http://www.newartisans.com/2007/08/using-org-mode-as-a-day-planner/][John Wiegley]].

** Task states

#+BEGIN_SRC emacs-lisp
  (setq org-use-fast-todo-selection t)
  (setq org-todo-keywords
        '((sequence "TODO(t)" "SOMEDAY(s!/!)" "|" "DONE(d!/!)" "REFERENCE(r!/!)")))
#+END_SRC

In the past I've used an additional =NEXT= state for tasks I'm ready
to work on, but currently I rely on scheduling the task (during the
daily or weekly reviews) and the agenda to identify the things I'm
going to work on next.

Log task state changes into a drawer. A timestamp is logged every time
a task transitions from/to =SOMEDAY=, =DONE= or =REFERENCE= (hence the
=!= markers after the keywords above).

#+BEGIN_SRC emacs-lisp
  (setq org-log-into-drawer "LOGBOOK")
  (setq org-clock-into-drawer "LOGBOOK")
  (setq org-log-redeadline 'time)
  (setq org-log-reschedule 'time)
  (setq org-log-repeat 'time)
#+END_SRC

** Agenda

=inbox.org= is used for capturing tasks (with capture templates and a
few [[https://ifttt.com][IFTTT]] recipes that append content to the file). The =projects=
directory holds separate files for the different projects I'm working
on (basically containing headers for tasks and reference materials).
Each file has a =#+FILETAGS= header so it is easier to filter tasks
for a particular project using tags in the agenda.

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files
        '("~/Dropbox/org/inbox.org"
          "~/Dropbox/org/projects/"))
#+END_SRC

Configure a group of agenda views and key bindings for quick access.

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-repeating-timestamp-show-all t
        org-agenda-remove-tags t
        org-agenda-show-all-dates t
        org-agenda-skip-deadline-if-done t
        org-agenda-skip-deadline-prewarning-if-scheduled t
        org-agenda-skip-scheduled-if-done t
        org-agenda-start-on-weekday nil)

  (setq org-agenda-custom-commands
        '(("c" . "Custom agenda commands")
          ("cd" "Agenda for today" agenda ""
           ((org-agenda-overriding-header "Agenda for today: ")
            (org-agenda-span 1)
            (org-deadline-warning-days 1)))
          ("cw" "Agenda for next week" agenda ""
           ((org-agenda-overriding-header "Agenda for next week: ")
            (org-agenda-span 7)
            (org-deadline-warning-days 14)))
          ("ct" "Unscheduled tasks" todo "TODO"
           ((org-agenda-overriding-header "Unscheduled TODO tasks: ")
            (org-agenda-skip-function '(org-agenda-skip-subtree-if 'scheduled))))))

  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "<f12>")
   (lambda (&optional arg) (interactive "P") (org-agenda arg "cw")))
  (global-set-key (kbd "<f11>")
   (lambda (&optional arg) (interactive "P") (org-agenda arg "cd")))
  (global-set-key (kbd "<f10>")
   (lambda (&optional arg) (interactive "P") (org-agenda arg "ct")))
#+END_SRC

** Capturing and refiling

Everything goes into =inbox.org= and it's later refiled to the correct file.

#+BEGIN_SRC emacs-lisp
  (setq org-directory "~/Dropbox/org/")
  (setq org-default-notes-file "~/Dropbox/org/inbox.org")

  (setq org-capture-templates
        '(("t" "Task" entry (file "")
           "* TODO %?\n  :LOGBOOK:\n  - State \"TODO\"                         %U\n  :END:")
          ("r" "Reference" entry (file "")
           "* REFERENCE %?\n  :LOGBOOK:\n  - State \"REFERENCE\"                    %U\n  :END:")))

  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "<f9>") 'org-capture)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq org-refile-targets '((org-agenda-files :level . 1)))
#+END_SRC

** Habits

The states used in the consistency graphs are simplified by
representing the yellow (if the task was going to be overdue the next
day) and red (if the task was overdue on that day) states with a
single red color. The colors also have been modified to match the ones
used in the agenda views (which come from the solarized color palette).

#+BEGIN_SRC emacs-lisp
  (require 'org-habit)

  (setq org-habit-preceding-days 14)
  (setq org-habit-following-days 1)
  (setq org-habit-show-habits-only-for-today t)

  ;; Blue :: If the task wasn't to be done yet on that day.
  (set-face-attribute 'org-habit-clear-face nil
                      :foreground "#002b36"
                      :background "#268bd2")
  (set-face-attribute 'org-habit-clear-future-face nil
                      :foreground "#002b36"
                      :background "#268bd2")

  ;; Green :: If the task could have been done on that day.
  (set-face-attribute 'org-habit-ready-face nil
                      :foreground "#002b36"
                      :background "#859900")
  (set-face-attribute 'org-habit-ready-future-face nil
                      :foreground "#002b36"
                      :background "#859900")

  ;; Red :: If the task was overdue on that day, or if the task was
  ;; going to be overdue the next day.
  (set-face-attribute 'org-habit-overdue-face nil
                      :foreground "#002b36"
                      :background "#cb4b16")
  (set-face-attribute 'org-habit-overdue-future-face nil
                      :foreground "#002b36"
                      :background "#cb4b16")
  (set-face-attribute 'org-habit-alert-face nil
                      :foreground "#002b36"
                      :background "#cb4b16")
  (set-face-attribute 'org-habit-alert-future-face nil
                      :foreground "#002b36"
                      :background "#cb4b16")
#+END_SRC

** Pomodoro technique

#+BEGIN_SRC emacs-lisp
  (require 'org-pomodoro)
#+END_SRC

Set the duration of the pomodoro.

#+BEGIN_SRC emacs-lisp
  (setq org-pomodoro-length 25
        org-pomodoro-long-break-frequency 4
        org-pomodoro-short-break-length 3
        org-pomodoro-long-break-length 15)
#+END_SRC

Configure the notifications: disable sounds, configure the modeline,
show only the minutes remaining on the timer (I find the ticking
seconds to be quite distracting), and use desktop notifications.

#+BEGIN_SRC emacs-lisp
  (setq org-pomodoro-play-sounds nil
        org-pomodoro-format "Pomodoro %s"
        org-pomodoro-short-break-format "Short Break %s"
        org-pomodoro-long-break-format "Long Break %s")

  (set-face-foreground 'org-pomodoro-mode-line
                       (face-attribute 'mode-line :foreground))
  (set-face-foreground 'org-pomodoro-mode-line-break
                       (face-attribute 'mode-line :foreground))

  (defun org-pomodoro-format-seconds ()
    (format-seconds org-pomodoro-time-format
                    (* 60 (ceiling org-pomodoro-countdown 60))))

  (require 'notifications)
  (defun org-pomodoro-notify (title message)
    (notifications-notify
     :title title
     :body message
     :app-name "Emacs: Org-Pomodoro"))
#+END_SRC

Use =F5= to start/stop a pomodoro.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f5>") 'org-pomodoro)
#+END_SRC

** Holidays

Configure a list of holidays I'm interested in.

#+BEGIN_SRC emacs-lisp
  (setq holiday-local-holidays
        '((holiday-fixed 2 14 "Valentine's Day")
          (holiday-fixed 4 1 "April Fools' Day")
          (holiday-float 5 0 2 "Mother's Day")
          (holiday-float 6 0 3 "Father's Day")
          (holiday-fixed 10 31 "Halloween")
          (holiday-fixed 12 31 "New Year's Eve")
          ;; Ontario Public Holidays
          ;; http://www.labour.gov.on.ca/english/es/pubs/guide/publicholidays.php
          (holiday-fixed 1 1 "New Year's Day")      ; January 1
          (holiday-float 2 1 3 "Family Day")        ; Third Monday in February
          (holiday-easter-etc -2 "Good Friday")     ; Friday before Easter Sunday
          (holiday-float 5 1 -1 "Victoria Day" 24)  ; Monday before May 25
          (holiday-fixed 7 1 "Canada Day")          ; July 1
          (holiday-float 9 1 1 "Labour Day")        ; First Monday in September
          (holiday-float 10 1 2 "Thanksgiving Day") ; Second Monday in October
          (holiday-fixed 12 25 "Christmas Day")     ; Christmas Day
          (holiday-fixed 12 26 "Boxing Day")))      ; Boxing Day

  (setq holiday-other-holidays '())
#+END_SRC

Regenerate =calendar-holidays=.

#+BEGIN_SRC emacs-lisp
  (setq calendar-holidays
        (append holiday-local-holidays
                holiday-other-holidays))
#+END_SRC

** Miscellaneous

*** Associate Org-mode with .org and.org_archive files

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
  (add-to-list 'auto-mode-alist '("\\.org_archive\\'" . org-mode))
#+END_SRC

*** Save all Org-mode buffers at one minute before the hour

This is used in combination with the =bin/org-sync= shell script.

#+BEGIN_SRC emacs-lisp
  (run-at-time "00:59" (* 60 60) 'org-save-all-org-buffers)
#+END_SRC

*** Don't split lines with M-RET

#+BEGIN_SRC emacs-lisp
  (setq org-M-RET-may-split-line nil)
#+END_SRC

*** Other key bindings

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c b") 'org-iswitchb)
  (global-set-key (kbd "C-c l") 'org-store-link)
#+END_SRC

* Git

Git integration using Magit.

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'magit)
    ;; vc-git no longer needed.
    (delete 'Git vc-handled-backends)
    ;; Don't show " MRev" in modeline.
    (setq magit-auto-revert-mode-lighter "")
    ;; Bind a global key to magit-status.
    (global-set-key (kbd "C-c g") 'magit-status))
#+END_SRC

* YASnippet

Enable the YASnippet minor mode in all buffers.

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'yasnippet)
    (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
    (yas-global-mode 1))
#+END_SRC

* Miscellaneous

Settings that don't belong to any previous category.

** Disable prompts and startup messages

Based on [[http://www.masteringemacs.org/article/disabling-prompts-emacs][Disabling Prompts in Emacs]].

#+BEGIN_SRC emacs-lisp
  ;; Ask "yes or no" questions with "y or n"
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; Disable confirmations for non-existing files or buffers
  (setq confirm-nonexistent-file-or-buffer nil)

  ;; Disable the splash screen and the echo area message
  (setq inhibit-startup-message t
        inhibit-startup-echo-area-message "yasserglez")

  ;; Kill a buffer even if it has a process attached to it
  (setq kill-buffer-query-functions
    (remq 'process-kill-buffer-query-function
           kill-buffer-query-functions))
#+END_SRC

** Disable auto-save and backups

#+BEGIN_SRC emacs-lisp
  (setq auto-save-default nil)
  (setq make-backup-files nil)
#+END_SRC

** End sentences with one space

#+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)
#+END_SRC

** Remove trailing whitespace on save

#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** Require a final newline when saving files

#+BEGIN_SRC emacs-lisp
  (setq require-final-newline t)
#+END_SRC

** RET auto-indents by default

#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "RET") 'newline-and-indent)
#+END_SRC

** Don't use tabs for indentation

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC
